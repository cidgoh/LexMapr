#!/usr/bin/env python3

import sys
import os
import argparse
import logging

import lexmapr.pipeline

logger = logging.getLogger("lexmapr")

script_name = os.path.basename(os.path.realpath(sys.argv[0]))


def valid_input_file(path):
    """Raises appropriate errors if input file is invalid.

    Called by argparse parser when validating arguments.

    :param str path: Input file path
    :return: path
    :rtype: str
    """
    _, ext = os.path.splitext(path)
    if ext != ".csv" and ext != ".tsv":
        raise argparse.ArgumentTypeError("Please supply a csv or tsv input file")

    if not os.path.exists(path):
        raise FileNotFoundError(path + " not found")

    return path


if __name__ == "__main__":
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument("input_file", help="Input csv or tsv file", type=valid_input_file)
    parser.add_argument("-o", "--output", nargs="?", help="Output file")
    parser.add_argument("-f", "--full", action="store_true", help="Full output format")
    parser.add_argument("-c", "--config",
                        help="Path to JSON file containing the IRI of ontologies to fetch terms "
                             "from"),
    parser.add_argument("-b", "--bucket", action="store_true",
                        help="Classify samples into pre-defined buckets")
    parser.add_argument("--no-cache", action="store_true",
                        help="Ignore or replace online cached resources, if there are any.")
    parser.add_argument("-v", "--version", action="version",
                        version="%(prog)s " + lexmapr.__version__)
    parser.add_argument("-p", "--profile", choices=["ifsac"],
                        help="Pre-defined sets of command-line arguments for specialized purposes:"
                             "\n\n"
                             "* ifsac: \n"
                             "  * maps samples to food and environmental resources\n"
                             "  * classifies samples into ifsac labels\n"
                             "  * outputs content to ``ifsac_output.tsv``")
    args = parser.parse_args()

    lexmapr.pipeline.run(args)
